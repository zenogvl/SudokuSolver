ommittedCells = indexMatrix2List(indexOmmittedCells))
class(hint) <- "skyscraper"
hintList <- append(hintList, list(hint))
}
possibleSpotsList[[numb]][indexOmmittedCells] <- FALSE
}
}
}
}
if(returnHint){
return(hintList)
} else {
return(possibleSpotsList)
}
}
skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
length(hintList)
hint <- hintList[[1]]
hint
skyscraperFinder <- function(possibleSpotsList, sudoku, returnHint = FALSE){
hintList <- list()
for(numb in 1:9){
###    Rows
#Get a list of the number of possabilities in every row
nPossibleRow <- apply(possibleSpotsList[[numb]], 1, sum)
#Stop if all the rows are filled in.
if(sum(nPossibleRow) == 0){
next
}
#Check if any row has only two possabilities
if(any(nPossibleRow == 2)){
indexAll <- which(possibleSpotsList[[numb]], arr.ind = TRUE)
#Look for a skyscraper in every row with two possabilities
for(row in (1:9)[nPossibleRow == 2]){
#The top of the skyscraper are other options in the column of a row with only two possabilities
skyscraperTop <- indexAll[indexAll[,2] %in% (1:9)[possibleSpotsList[[numb]][row,]] & indexAll[, 1] != row, , drop = FALSE]
if(nrow(skyscraperTop) < 2){
next
}
# Stop if the skyscrapper is actually a xwing.
if(length(unique(skyscraperTop[,1])) == 1){
next
}
#Check if the top cells of the skycraper see any cells.
if(is.logical(cellInfluenceShower(skyscraperTop))){
next
}
#Check if the skyscraper changes any cells.
if(any(possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE])){
#Get the index of the changed cells
indexOmmittedCells <- cellInfluenceShower(skyscraperTop)[possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE], , drop = FALSE]
if(returnHint){
#Get the index of the base of the skyscraper
skyscraperBase <- indexAll[indexAll[, 1] == row,]
hint <- list(number = numb,
dirrection = "row",
which = row,
skyscraperBase = indexMatrix2List(skyscraperBase),
skyscraperTop = indexMatrix2List(skyscraperTop),
ommittedCells = indexMatrix2List(indexOmmittedCells))
class(hint) <- "skyscraper"
hintList <- append(hintList, list(hint))
}
possibleSpotsList[[numb]][indexOmmittedCells] <- FALSE
}
}
}
###    Columns
nPossibleCol <- apply(possibleSpotsList[[numb]], 2, sum)
if(sum(nPossibleCol) == 0){
next
}
#Check if any row has only two possibilities
if(any(nPossibleCol == 2)){
#Look for a skyscraper in every colum with two possibilities
for(col in (1:9)[nPossibleCol == 2]){
indexAll <- which(possibleSpotsList[[numb]], arr.ind = TRUE)
#The top of the skyscraper are other options in the row of a colum with only two possibilities
skyscraperTop <- indexAll[indexAll[,1] %in% (1:9)[possibleSpotsList[[numb]][, col]] & indexAll[, 2] != col, , drop = FALSE]
if(nrow(skyscraperTop) < 2){
next
}
# Stop if the skyscrapper is actually a xwing.
if(length(unique(skyscraperTop[,2])) == 1){
next
}
#Check if the top cells of the skyscraper see any cells.
if(is.logical(cellInfluenceShower(skyscraperTop))){
next
}
#Check if the skyscraper changes any cells.
if(any(possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE])){
#Get the index of the changed cells
indexOmmittedCells <- cellInfluenceShower(skyscraperTop)[possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE], , drop = FALSE]
if(returnHint){
#Get the index of the base of the skyscraper
skyscraperBase <- indexAll[indexAll[, 2] == col,]
hint <- list(number = numb,
direction = "column",
which = col,
skyscraperBase = indexMatrix2List(skyscraperBase),
skyscraperTop = indexMatrix2List(skyscraperTop),
ommittedCells = indexMatrix2List(indexOmmittedCells))
class(hint) <- "skyscraper"
hintList <- append(hintList, list(hint))
}
possibleSpotsList[[numb]][indexOmmittedCells] <- FALSE
}
}
}
}
if(returnHint){
return(hintList)
} else {
return(possibleSpotsList)
}
}
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
hint <- hintList[[1]]
hint
skyscraperFinder <- function(possibleSpotsList, sudoku, returnHint = FALSE){
hintList <- list()
for(numb in 1:9){
###    Rows
#Get a list of the number of possabilities in every row
nPossibleRow <- apply(possibleSpotsList[[numb]], 1, sum)
#Stop if all the rows are filled in.
if(sum(nPossibleRow) == 0){
next
}
#Check if any row has only two possabilities
if(any(nPossibleRow == 2)){
indexAll <- which(possibleSpotsList[[numb]], arr.ind = TRUE)
#Look for a skyscraper in every row with two possabilities
for(row in (1:9)[nPossibleRow == 2]){
#The top of the skyscraper are other options in the column of a row with only two possabilities
skyscraperTop <- indexAll[indexAll[,2] %in% (1:9)[possibleSpotsList[[numb]][row,]] & indexAll[, 1] != row, , drop = FALSE]
if(nrow(skyscraperTop) < 2){
next
}
# Stop if the skyscrapper is actually a xwing.
if(length(unique(skyscraperTop[,1])) == 1){
next
}
#Check if the top cells of the skycraper see any cells.
if(is.logical(cellInfluenceShower(skyscraperTop))){
next
}
#Check if the skyscraper changes any cells.
if(any(possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE])){
#Get the index of the changed cells
indexOmmittedCells <- cellInfluenceShower(skyscraperTop)[possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE], , drop = FALSE]
if(returnHint){
#Get the index of the base of the skyscraper
skyscraperBase <- indexAll[indexAll[, 1] == row,]
hint <- list(number = numb,
direction = "row",
which = row,
skyscraperBase = indexMatrix2List(skyscraperBase),
skyscraperTop = indexMatrix2List(skyscraperTop),
ommittedCells = indexMatrix2List(indexOmmittedCells))
class(hint) <- "skyscraper"
hintList <- append(hintList, list(hint))
}
possibleSpotsList[[numb]][indexOmmittedCells] <- FALSE
}
}
}
###    Columns
nPossibleCol <- apply(possibleSpotsList[[numb]], 2, sum)
if(sum(nPossibleCol) == 0){
next
}
#Check if any row has only two possibilities
if(any(nPossibleCol == 2)){
#Look for a skyscraper in every colum with two possibilities
for(col in (1:9)[nPossibleCol == 2]){
indexAll <- which(possibleSpotsList[[numb]], arr.ind = TRUE)
#The top of the skyscraper are other options in the row of a colum with only two possibilities
skyscraperTop <- indexAll[indexAll[,1] %in% (1:9)[possibleSpotsList[[numb]][, col]] & indexAll[, 2] != col, , drop = FALSE]
if(nrow(skyscraperTop) < 2){
next
}
# Stop if the skyscrapper is actually a xwing.
if(length(unique(skyscraperTop[,2])) == 1){
next
}
#Check if the top cells of the skyscraper see any cells.
if(is.logical(cellInfluenceShower(skyscraperTop))){
next
}
#Check if the skyscraper changes any cells.
if(any(possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE])){
#Get the index of the changed cells
indexOmmittedCells <- cellInfluenceShower(skyscraperTop)[possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE], , drop = FALSE]
if(returnHint){
#Get the index of the base of the skyscraper
skyscraperBase <- indexAll[indexAll[, 2] == col,]
hint <- list(number = numb,
direction = "column",
which = col,
skyscraperBase = indexMatrix2List(skyscraperBase),
skyscraperTop = indexMatrix2List(skyscraperTop),
ommittedCells = indexMatrix2List(indexOmmittedCells))
class(hint) <- "skyscraper"
hintList <- append(hintList, list(hint))
}
possibleSpotsList[[numb]][indexOmmittedCells] <- FALSE
}
}
}
}
if(returnHint){
return(hintList)
} else {
return(possibleSpotsList)
}
}
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
length(hintList)
hint <- hintList[[1]]
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
""))
hint$number
hintList
possibleSpotsList <- lapply(1:9, function(x) matrix(TRUE,nrow = 9, ncol = 9))
possibleSpotsList <- possibleSpotEliminater(possibleSpotsList = possibleSpotsList, sudoku = sudoku)
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
length(hintList)
hint <- hintList[[1]]
hint
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
""))
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]], " & ", indexToText(hint$skyscraperBase[[1]])))
}
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
length(hintList)
hint <- hintList[[1]]
printHint(hintList[[1]])
plot(sudoku)
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[1]])
))
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]])
))
hint$skyscraperTop
nSkyscrapperTop <- length(hint$skyscraperTop)
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that "
))
nSkyscrapperTop <- length(hint$skyscraperTop)
if(nSkyscrapperTop == 2){
indexSkyscrapperTop <- paste0(indexToText(hint$skyscraperTop[[1]]), " & ", indexToText(hint$skyscraperTop[[2]]))
} else {
indexSkyscrapperTop <- paste0(paste0(sapply(hint$skyscraperTop, indexToText)[-nSkyscrapperTop], collapse = ", "), " & ", indexToText(hint$skyscraperTop[[nSkyscrapperTop]]))
}
indexSkyscrapperTop
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that there is alway a number in: ", indexSkyscrapperTop
))
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that there is alway a number in the cells: ", indexSkyscrapperTop
))
nOmmission <- length(hint$ommittedCells)
if(nOmmission == 1){
indexOmission <- indexToText(hint$ommittedCells[[1]])
} else if(nOmmission == 2){
indexOmission <- paste0(indexToText(hint$ommittedCells[[1]]), " & ", indexToText(hint$ommittedCells[[2]]))
} else {
indexOmission <- paste0(paste0(sapply(hint$ommittedCells, indexToText)[-nOmmission], collapse = ", "), " & ", indexToText(hint$ommittedCells[[nOmmission]]))
}
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that there is alway a number in the cells: ", indexSkyscrapperTop,
"these cells see: ", indexOmission
))
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that there is alway a number in the cells: ", indexSkyscrapperTop,
" these cells see: ", indexOmission, ". These cells thus can't contain a ", hint$number, "."
))
printHint.skyscraper <- function(hint){
nSkyscrapperTop <- length(hint$skyscraperTop)
if(nSkyscrapperTop == 2){
indexSkyscrapperTop <- paste0(indexToText(hint$skyscraperTop[[1]]), " & ", indexToText(hint$skyscraperTop[[2]]))
} else {
indexSkyscrapperTop <- paste0(paste0(sapply(hint$skyscraperTop, indexToText)[-nSkyscrapperTop], collapse = ", "), " & ", indexToText(hint$skyscraperTop[[nSkyscrapperTop]]))
}
nOmmission <- length(hint$ommittedCells)
if(nOmmission == 1){
indexOmission <- indexToText(hint$ommittedCells[[1]])
} else if(nOmmission == 2){
indexOmission <- paste0(indexToText(hint$ommittedCells[[1]]), " & ", indexToText(hint$ommittedCells[[2]]))
} else {
indexOmission <- paste0(paste0(sapply(hint$ommittedCells, indexToText)[-nOmmission], collapse = ", "), " & ", indexToText(hint$ommittedCells[[nOmmission]]))
}
cat(paste0("Skyscraper: \n In ", hint$direction, " ", hint$which, ", ", hint$number,
" can only go in two spots: ", indexToText(hint$skyscraperBase[[1]]), " & ", indexToText(hint$skyscraperBase[[2]]),
" this means that there is alway a number in the cells: ", indexSkyscrapperTop,
" these cells see: ", indexOmission, ". These cells thus can't contain a ", hint$number, "."
))
}
printHint(hintList[[1]])
printHint(hintList[[2]])
sudoku <- inputControl(skycraperRow)
possibleSpotsList <- lapply(1:9, function(x) matrix(TRUE,nrow = 9, ncol = 9))
possibleSpotsList <- possibleSpotEliminater(possibleSpotsList = possibleSpotsList, sudoku = sudoku)
numb <- 3
row <- 1
#Get a list of the number of possabilities in every row
nPossibleRow <- apply(possibleSpotsList[[numb]], 1, sum)
nPossibleRow
indexAll <- which(possibleSpotsList[[numb]], arr.ind = TRUE)
#The top of the skyscraper are other options in the column of a row with only two possabilities
skyscraperTop <- indexAll[indexAll[,2] %in% (1:9)[possibleSpotsList[[numb]][row,]] & indexAll[, 1] != row, , drop = FALSE]
skyscraperTop
cells <- skyscraperTop
#Get the index of the box start
box <- c(row = rep(c(1,4,7), each = 3)[cells[1,1]], col = rep(c(1,4,7), each = 3)[cells[1,2]])
#Create a matrix of all indexes influenced by a cell.
cellsInfluenceNew <- rbind(cbind(row = rep(1:3, each = 3), col = rep(1:3,3)) + rep(box, each = 9) - 1,
cbind(rep(cells[1,1], 9), 1:9),
cbind(1:9, rep(cells[1,2], 9)))
#Remove duplicates
cellsInfluence <- cellsInfluenceNew[!duplicated(cellsInfluenceNew),]
#Remove the considered cell
#cellsInfluence <- cellsInfluenceNew[!apply(cellsInfluenceNew, 1, identical, y = cells[1,]), ]
#When there are more cells to be considerd, find what cells are influenced by all cells.
if(nrow(cells) > 1){
for(i in 2:nrow(cells)){
box <- c(row = rep(c(1,4,7), each = 3)[cells[i,1]], col = rep(c(1,4,7), each = 3)[cells[i,2]])
cellsInfluenceNew <- rbind(cbind(row = rep(1:3, each = 3), col = rep(1:3,3)) + rep(box, each = 9) - 1,
cbind(rep(cells[i,1], 9), 1:9),
cbind(1:9, rep(cells[i,2], 9)))
cellsInfluenceNew <- cellsInfluenceNew[!duplicated(cellsInfluenceNew), , drop = FALSE]
#cellsInfluenceNew <- cellsInfluenceNew[!apply(cellsInfluenceNew, 1, identical, y = cells[i,]), ]
cellsInfluence <- rbind(cellsInfluence, cellsInfluenceNew)
cellsInfluence <- cellsInfluence[duplicated(cellsInfluence), , drop = FALSE]
}
}
cellsInfluence
nrow(cellsInfluence) > 0
cells
i <- 1
apply(cellsInfluence, 1, identical, y = as.double(cells[i,])
)
cellsInfluence[1,]
typeof(cellsInfluence[1,])
identical(typeof(cellsInfluence[1,]), as.double(cells[i,]))
cellsInfluence
cells
cellsInfluence
typeof(cellsInfluence)
as.matrix(cellsInfluence)
typeof(as.matrix(cellsInfluence))
cells[i,]
identical(cellsInfluence[1,], as.double(cells[i,]))
cellsInfluence[1,]
as.double(cells[i,])
apply(cellsInfluence, 1, as.double)
apply(cellsInfluence, 2, as.double)
apply(apply(cellsInfluence, 2, as.double), 1, identical, y = as.double(cells[i,]))
apply(cellsInfluence, 2, as.double)
as.double(cells[i,])
apply(apply(cellsInfluence, 2, as.integer), 1, identical, y = as.integer(cells[i,]))
apply(apply(cellsInfluence, 2, as.numeric), 1, identical, y = as.numeric(cells[i,]))
apply(apply(cellsInfluence, 2, as.character), 1, identical, y = as.character(cells[i,]))
apply(cellsInfluence, 2, as.character)
as.character(cells[i,])
identical(cellsInfluence[1,], as.double(cells[i,, drop = FALSE]))
as.double(cells[i,, drop = FALSE])
apply(apply(cellsInfluence, 2, as.double), 1, identical, y = as.double(cells[i,, drop = FALSE]))
cells[i, ]
cellsInfluence[,1] %!in% cells[i, 1]
cellsInfluence[,1]
cellsInfluence[,1] %in% cells[i, 1]
cellsInfluence[,1] %in% cells[i, 1] & cellsInfluence[,2] %in% cells[i, 2]
cellsInfluence <- cellsInfluence[!(cellsInfluence[,1] %in% cells[i, 1] & cellsInfluence[,2] %in% cells[i, 2]), , drop = FALSE]
cellsInfluence
for(i in 1:nrow(cells)){
cellsInfluence <- cellsInfluence[!(cellsInfluence[,1] %in% cells[i, 1] & cellsInfluence[,2] %in% cells[i, 2]), , drop = FALSE]
}
cellsInfluence
# This function shows what cells are influenced (or seen) by one or multiple cells.
cellInfluenceShower <- function(cells){
#If input isn't a matrix, change it to a matrix
if(!("matrix"  %in% class(cells))){
cells <-  matrix(cells, ncol = 2, byrow = F)
}
#Get the index of the box start
box <- c(row = rep(c(1,4,7), each = 3)[cells[1,1]], col = rep(c(1,4,7), each = 3)[cells[1,2]])
#Create a matrix of all indexes influenced by a cell.
cellsInfluenceNew <- rbind(cbind(row = rep(1:3, each = 3), col = rep(1:3,3)) + rep(box, each = 9) - 1,
cbind(rep(cells[1,1], 9), 1:9),
cbind(1:9, rep(cells[1,2], 9)))
#Remove duplicates
cellsInfluence <- cellsInfluenceNew[!duplicated(cellsInfluenceNew),]
#Remove the considered cell
#cellsInfluence <- cellsInfluenceNew[!apply(cellsInfluenceNew, 1, identical, y = cells[1,]), ]
#When there are more cells to be considerd, find what cells are influenced by all cells.
if(nrow(cells) > 1){
for(i in 2:nrow(cells)){
box <- c(row = rep(c(1,4,7), each = 3)[cells[i,1]], col = rep(c(1,4,7), each = 3)[cells[i,2]])
cellsInfluenceNew <- rbind(cbind(row = rep(1:3, each = 3), col = rep(1:3,3)) + rep(box, each = 9) - 1,
cbind(rep(cells[i,1], 9), 1:9),
cbind(1:9, rep(cells[i,2], 9)))
cellsInfluenceNew <- cellsInfluenceNew[!duplicated(cellsInfluenceNew), , drop = FALSE]
#cellsInfluenceNew <- cellsInfluenceNew[!apply(cellsInfluenceNew, 1, identical, y = cells[i,]), ]
cellsInfluence <- rbind(cellsInfluence, cellsInfluenceNew)
cellsInfluence <- cellsInfluence[duplicated(cellsInfluence), , drop = FALSE]
}
}
#Remove inputs cells
if(nrow(cellsInfluence) > 0){
for(i in 1:nrow(cells)){
cellsInfluence <- cellsInfluence[!(cellsInfluence[,1] %in% cells[i, 1] & cellsInfluence[,2] %in% cells[i, 2]), , drop = FALSE]
}
}
if(nrow(cellsInfluence) == 0){
return(FALSE)
} else {
return(cellsInfluence)
}
}
any(possibleSpotsList[[numb]][cellInfluenceShower(skyscraperTop), drop = FALSE])
hintList <- skyscraperFinder(possibleSpotsList, sudoku, returnHint = TRUE)
length(hintList)
printHint(hintList[[1]])
plot(sudoku)
plot.skyscrapper <- function(hint){
for(i in 1:2){
plot(hint$skyscraperBase[[i]], col = "green")
}
for(i in 1:length(hint$skyscraperTop)){
plot(hint$skyscraperTop[[i]], col = "yellow")
}
for(i in 1:length(hint$ommittedCells)){
plot(hint$ommittedCells[[i]], col = "red")
}
}
plot(sudoku)
plot(hint)
for(i in 1:2){
plot(hint$skyscraperBase[[i]], col = "green")
}
hint
plot.skyscraper <- function(hint){
for(i in 1:2){
plot(hint$skyscraperBase[[i]], col = "green")
}
for(i in 1:length(hint$skyscraperTop)){
plot(hint$skyscraperTop[[i]], col = "yellow")
}
for(i in 1:length(hint$ommittedCells)){
plot(hint$ommittedCells[[i]], col = "red")
}
}
plot(sudoku)
plot(hint)
sudoku <- inputControl(skycraperCol)
possibleSpotsList <- lapply(1:9, function(x) matrix(TRUE,nrow = 9, ncol = 9))
possibleSpotsList <- possibleSpotEliminater(possibleSpotsList = possibleSpotsList, sudoku = sudoku)
plot(sudoku)
nPossibleCol <- apply(possibleSpotsList[[numb]], 2, sum)
if(sum(nPossibleCol) == 0){
next
}
nPossibleCol
numb
numb <- 4
nPossibleCol <- apply(possibleSpotsList[[numb]], 2, sum)
nPossibleCol
sum(nPossibleCol == 2)
nPossibleCol
uniqueCombinations((1:9)[nPossibleCol == 2 ], 2)
(1:9)[nPossibleCol == 2 ]
uniqCombCols
uniqCombCols <- uniqueCombinations((1:9)[nPossibleCol == 2 ], 2)
uniqCombCols
nPossibleCol
possibleSpotsList[[numb]][,nPossibleCol == 2]
nPossibleRow <- apply(possibleSpotsList[[numb]], 1, sum)
possibleSpotsList[[numb]][nPossibleRow == 2,]
possibleSpotsList[[numb]][nPossibleRow == 2,]
nPossibleRow == 2
possibleSpotsList[[numb]][nPossibleRow == 2 , ]
apply(possibleSpotsList[[numb]][nPossibleRow == 2 , ], 1 , sum)
apply(possibleSpotsList[[numb]][nPossibleRow == 2 , ], 2, sum)
uniqCombRows <- uniqueCombinations((1:9)[nPossibleRow == 2 ], 2)
uniqCombRows
possibleSpotsList[[numb]][uniqCombRows[2,],]
possibleSpotsList[[numb]][,uniqCombRows[2,]]
uniqCombRows[2,]
uniqCombRows
numb
nPossibleRow
possibleSpotsList[[numb]][uniqCombRows[2,]]
possibleSpotsList[[numb]][uniqCombRows[2,],]
apply(possibleSpotsList[[numb]][uniqCombRows[2,],], 2, sum)
apply(possibleSpotsList[[numb]][uniqCombRows[2,],], 2, sum) == 2
sum(apply(possibleSpotsList[[numb]][uniqCombRows[2,],], 2, sum) == 2) == 1
uniqCombRows
apply(possibleSpotsList[[numb]][uniqCombRows[rows,],], 2, sum) == 2)
apply(possibleSpotsList[[numb]][uniqCombRows[rows,],], 2, sum) == 2
rows <- 2
apply(possibleSpotsList[[numb]][uniqCombRows[rows,],], 2, sum) == 2
